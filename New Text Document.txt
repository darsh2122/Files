import com.opencsv.CSVReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileReader;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CSVToDatabaseLoader {
    private static final Logger logger = LoggerFactory.getLogger(CSVToDatabaseLoader.class);

    private final Connection connection;
    private final String csvFilePath;
    private final String tableName;
    private final int batchSize;

    public CSVToDatabaseLoader(Connection connection, String csvFilePath, String tableName, int batchSize) {
        this.connection = connection;
        this.csvFilePath = csvFilePath;
        this.tableName = tableName;
        this.batchSize = batchSize;
    }

    public void loadCSV() {
        try (CSVReader reader = new CSVReader(new FileReader(csvFilePath))) {
            String[] headers = reader.readNext();
            if (headers == null) {
                throw new IllegalArgumentException("CSV file is empty or malformed");
            }

            if (!tableExists()) {
                createTable(headers);
            } else {
                if (!validateTableSchema(headers)) {
                    throw new SQLException("Table schema does not match CSV headers");
                }
            }

            loadData(reader, headers);
            logger.info("CSV file has been successfully loaded into the database");
        } catch (Exception e) {
            logger.error("Error loading CSV file into database", e);
        }
    }

    private boolean tableExists() throws SQLException {
        DatabaseMetaData meta = connection.getMetaData();
        try (ResultSet resultSet = meta.getTables(null, null, tableName, new String[]{"TABLE"})) {
            return resultSet.next();
        }
    }

    private boolean validateTableSchema(String[] headers) throws SQLException {
        List<String> columnNames = new ArrayList<>();
        DatabaseMetaData meta = connection.getMetaData();
        try (ResultSet resultSet = meta.getColumns(null, null, tableName, null)) {
            while (resultSet.next()) {
                columnNames.add(resultSet.getString("COLUMN_NAME"));
            }
        }
        for (String header : headers) {
            if (!columnNames.contains(header)) {
                return false;
            }
        }
        return true;
    }

    private void createTable(String[] headers) throws SQLException {
        StringBuilder createTableSQL = new StringBuilder("CREATE TABLE ")
                .append(tableName)
                .append(" (");

        for (String header : headers) {
            createTableSQL.append(header).append(" VARCHAR(255),");
        }

        createTableSQL.setLength(createTableSQL.length() - 1); // Remove last comma
        createTableSQL.append(")");

        try (Statement stmt = connection.createStatement()) {
            stmt.execute(createTableSQL.toString());
        }
    }

    private void loadData(CSVReader reader, String[] headers) throws SQLException {
        String[] line;
        int count = 0;
        try (PreparedStatement pstmt = createInsertPreparedStatement(headers)) {
            while ((line = reader.readNext()) != null) {
                for (int i = 0; i < line.length; i++) {
                    pstmt.setString(i + 1, line[i]);
                }
                pstmt.addBatch();
                count++;

                if (count % batchSize == 0) {
                    pstmt.executeBatch();
                }
            }
            pstmt.executeBatch(); // Execute the remaining batch
        }
    }

    private PreparedStatement createInsertPreparedStatement(String[] headers) throws SQLException {
        StringBuilder insertSQL = new StringBuilder("INSERT INTO ")
                .append(tableName)
                .append(" (");

        for (String header : headers) {
            insertSQL.append(header).append(",");
        }

        insertSQL.setLength(insertSQL.length() - 1); // Remove last comma
        insertSQL.append(") VALUES (");

        for (int i = 0; i < headers.length; i++) {
            insertSQL.append("?,");
        }

        insertSQL.setLength(insertSQL.length() - 1); // Remove last comma
        insertSQL.append(")");

        return connection.prepareStatement(insertSQL.toString());
    }
}
