import java.io.*;
import java.util.*;
import net.sf.JRecord.*;
import net.sf.JRecord.Common.Constants;
import net.sf.JRecord.Details.*;
import net.sf.JRecord.External.*;
import net.sf.JRecord.External.CobolCopybookLoader;
import net.sf.JRecord.IO.*;
import net.sf.JRecord.Numeric.Convert;

public class CobolConverter {

    private final LayoutDetail layout;
    private final String encoding;

    public CobolConverter(String copybookPath, String encoding, int recordLength) throws Exception {
        this.encoding = encoding;
        this.layout = loadCopybook(copybookPath, recordLength);
    }

    private LayoutDetail loadCopybook(String copybookPath, int recordLength) throws Exception {
        CobolCopybookLoader loader = new CobolCopybookLoader();
        ExternalRecord externalRecord = loader.loadCopyBook(
            new File(copybookPath), 
            CopybookLoader.SPLIT_NONE, 
            0, 
            encoding, 
            Convert.FMT_MAINFRAME, 
            0, 
            null
        );

        return externalRecord.asLayoutDetail()
                .setRecordLength(recordLength);
    }

    public void convertToCsv(String dataFile, String csvFile, String fileOrganization) throws Exception {
        AbstractLineReader reader = createReader(dataFile, fileOrganization);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(csvFile))) {
            writeHeader(writer);
            AbstractLine line;
            while ((line = reader.read()) != null) {
                writer.write(convertLineToCsv(line));
                writer.newLine();
            }
        }
        reader.close();
    }

    private AbstractLineReader createReader(String dataFile, String fileOrganization) throws Exception {
        int fileStructure = Constants.IO_STANDARD_TEXT_FILE;
        if ("fixed".equalsIgnoreCase(fileOrganization)) {
            fileStructure = Constants.IO_FIXED_LENGTH;
        } else if ("variable".equalsIgnoreCase(fileOrganization)) {
            fileStructure = Constants.IO_VB;
        }

        return LineIOProvider.getInstance().getLineReader(fileStructure)
                .open(dataFile, layout);
    }

    private void writeHeader(BufferedWriter writer) throws IOException {
        List<String> fieldNames = new ArrayList<>();
        for (FieldDetail field : layout.getFields()) {
            // Skip group fields and only include leaf nodes
            if (field.isField() && field.getParent() != null) {
                fieldNames.add(field.getName());
            }
        }
        writer.write(String.join(",", fieldNames));
        writer.newLine();
    }

    private String convertLineToCsv(AbstractLine line) {
        List<String> values = new ArrayList<>();
        for (FieldDetail field : layout.getFields()) {
            if (field.isField() && field.getParent() != null) {
                String value = line.getFieldValue(field).asString().trim();
                values.add(escapeCsv(value));
            }
        }
        return String.join(",", values);
    }

    private String escapeCsv(String value) {
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            return "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }

    public static void main(String[] args) {
        try {
            if (args.length < 6) {
                System.out.println("Usage: java CobolConverter <copybook> <dataFile> <csvFile> <organization> <encoding> <recordLength>");
                System.out.println("Example: java CobolConverter copybook.cpy data.dat output.csv fixed CP037 500");
                return;
            }

            CobolConverter converter = new CobolConverter(
                args[0],  // copybook path
                args[4],  // encoding (e.g., CP037)
                Integer.parseInt(args[5])  // record length
            );

            converter.convertToCsv(
                args[1],  // input data file
                args[2],  // output CSV file
                args[3]   // file organization
            );

            System.out.println("Conversion completed successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
