import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Common.Constants;
import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.IO.AbstractLineReader;
import net.sf.JRecord.IO.CobolIoProvider;
import net.sf.JRecord.Numeric.Convert;
import net.sf.JRecord.def.IO.builders.ICobolIOBuilder;

import java.io.FileWriter;
import java.io.IOException;

public class MainframeToCsv {

    public static void main(String[] args) throws IOException {
        String inputFilePath = "path/to/mainframe/file.dat";
        String copybookPath = "path/to/copybook.cbl";
        String outputCsvPath = "path/to/output.csv";

        // Step 1: Build the Cobol IO configuration
        ICobolIOBuilder ioBuilder = JRecordInterface1.COBOL
                .newIOBuilder(copybookPath)
                .setFileOrganization(Constants.IO_FIXED_LENGTH) // Fixed-length records
                .setFont("CP037") // EBCDIC encoding
                .setDialect(Convert.FMT_MAINFRAME) // Mainframe format
                .setSplitCopybook(Constants.SPLIT_NONE); // Adjust if copybook has multiple layouts

        // Step 2: Create a line reader using the IO Builder
        CobolIoProvider ioProvider = CobolIoProvider.getInstance();
        AbstractLineReader reader = ioProvider.getLineReader(ioBuilder);
        reader.open(inputFilePath);

        // Step 3: Write CSV header (optional)
        FileWriter csvWriter = new FileWriter(outputCsvPath);
        csvWriter.write("Field1,Field2,Field3\n"); // Replace with your field names

        // Step 4: Process each record
        AbstractLine line;
        while ((line = reader.read()) != null) {
            String field1 = line.getFieldValue("FIELD-1").asString();
            String field2 = line.getFieldValue("FIELD-2").asString();
            String field3 = line.getFieldValue("FIELD-3").asString();

            csvWriter.write(String.format("%s,%s,%s\n", field1, field2, field3));
        }

        // Step 5: Cleanup
        reader.close();
        csvWriter.close();
        System.out.println("CSV generated: " + outputCsvPath);
    }
}
