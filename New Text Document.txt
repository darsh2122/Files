To use the Spring Boot application for uploading a CSV file, creating a database table, and inserting data into the table in batches, follow these steps:

### Prerequisites

- Ensure you have Java and Maven or Gradle installed.
- Set up a database (e.g., MySQL) and create a database for the application.
- Update the database connection details in the `application.properties` file.

### Step-by-Step Guide

1. **Create a Spring Boot Project**:
   - You can use Spring Initializr (https://start.spring.io/) to create a new project with the necessary dependencies.
   - Alternatively, create the project manually by setting up the `pom.xml` or `build.gradle` file.

2. **Add Dependencies**:
   - In your `pom.xml`, add the dependencies for Spring Boot, Spring Data JPA, MySQL, and OpenCSV as shown earlier.

   ```xml
   <dependencies>
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-data-jpa</artifactId>
       </dependency>
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-web</artifactId>
       </dependency>
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <scope>runtime</scope>
       </dependency>
       <dependency>
           <groupId>com.opencsv</groupId>
           <artifactId>opencsv</artifactId>
           <version>5.5.2</version>
       </dependency>
   </dependencies>
   ```

3. **Configure Database**:
   - Update the `application.properties` file with your database connection details.

   ```properties
   # application.properties
   spring.datasource.url=jdbc:mysql://localhost:3306/yourdb
   spring.datasource.username=root
   spring.datasource.password=yourpassword
   spring.jpa.hibernate.ddl-auto=update
   ```

4. **Create Service for CSV Handling**:
   - Implement the `CsvService` class to handle reading from the CSV file, creating the table, and inserting data.

   ```java
   import com.opencsv.CSVReader;
   import org.springframework.beans.factory.annotation.Autowired;
   import org.springframework.stereotype.Service;
   import org.springframework.transaction.annotation.Transactional;
   import org.springframework.web.multipart.MultipartFile;

   import javax.persistence.EntityManager;
   import java.io.IOException;
   import java.io.InputStream;
   import java.io.InputStreamReader;
   import java.util.Arrays;
   import java.util.List;

   @Service
   public class CsvService {

       @Autowired
       private EntityManager entityManager;

       @Transactional
       public void processCsv(MultipartFile file) throws IOException {
           List<String[]> rows = readCsv(file);
           if (rows.isEmpty()) {
               throw new RuntimeException("CSV file is empty.");
           }

           String[] headers = rows.get(0);
           String tableName = "dynamic_table";
           createTableIfNotExists(tableName, headers);
           insertDataInBatches(tableName, headers, rows.subList(1, rows.size()));
       }

       private List<String[]> readCsv(MultipartFile file) throws IOException {
           try (InputStream inputStream = file.getInputStream();
                InputStreamReader reader = new InputStreamReader(inputStream);
                CSVReader csvReader = new CSVReader(reader)) {
               return csvReader.readAll();
           }
       }

       private void createTableIfNotExists(String tableName, String[] headers) {
           StringBuilder sql = new StringBuilder("CREATE TABLE IF NOT EXISTS ")
                   .append(tableName)
                   .append(" (id BIGINT AUTO_INCREMENT PRIMARY KEY");

           for (String header : headers) {
               sql.append(", ").append(header).append(" VARCHAR(255)");
           }
           sql.append(");");
           entityManager.createNativeQuery(sql.toString()).executeUpdate();
       }

       private void insertDataInBatches(String tableName, String[] headers, List<String[]> rows) {
           int batchSize = 100;
           int rowCount = 0;

           StringBuilder sql = new StringBuilder("INSERT INTO ").append(tableName).append(" (");
           sql.append(String.join(", ", headers)).append(") VALUES ");

           for (String[] row : rows) {
               if (rowCount > 0) {
                   sql.append(", ");
               }
               sql.append("(").append(String.join(", ", Arrays.stream(row)
                       .map(value -> "'" + value.replace("'", "''") + "'")
                       .toArray(String[]::new))).append(")");

               if (++rowCount % batchSize == 0 || rowCount == rows.size()) {
                   entityManager.createNativeQuery(sql.toString()).executeUpdate();
                   sql.setLength(0);
                   sql.append("INSERT INTO ").append(tableName).append(" (")
                      .append(String.join(", ", headers)).append(") VALUES ");
               }
           }
       }
   }
   ```

5. **Create REST Controller**:
   - Implement the `CsvController` class to handle HTTP requests for uploading the CSV file.

   ```java
   import org.springframework.beans.factory.annotation.Autowired;
   import org.springframework.http.ResponseEntity;
   import org.springframework.web.bind.annotation.PostMapping;
   import org.springframework.web.bind.annotation.RequestMapping;
   import org.springframework.web.bind.annotation.RequestParam;
   import org.springframework.web.bind.annotation.RestController;
   import org.springframework.web.multipart.MultipartFile;

   import java.io.IOException;

   @RestController
   @RequestMapping("/api/csv")
   public class CsvController {

       @Autowired
       private CsvService csvService;

       @PostMapping("/upload")
       public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file) {
           try {
               csvService.processCsv(file);
               return ResponseEntity.ok("File uploaded and data saved.");
           } catch (IOException e) {
               return ResponseEntity.status(500).body("Failed to process file.");
           }
       }
   }
   ```

6. **Run the Application**:
   - Start your Spring Boot application by running the main application class. In your IDE, this is typically done by right-clicking the main class and selecting "Run".

   ```java
   import org.springframework.boot.SpringApplication;
   import org.springframework.boot.autoconfigure.SpringBootApplication;

   @SpringBootApplication
   public class CsvToDatabaseApplication {

       public static void main(String[] args) {
           SpringApplication.run(CsvToDatabaseApplication.class, args);
       }
   }
   ```

7. **Test the Application**:
   - Use a tool like Postman or cURL to upload a CSV file to the `/api/csv/upload` endpoint.

   Example using cURL:

   ```sh
   curl -F "file=@path/to/your/file.csv" http://localhost:8080/api/csv/upload
   ```

### CSV File Format

Ensure your CSV file format matches the following structure:

```plaintext
header1,header2,header3
value1,value2,value3
value4,value5,value6
...
```

### Summary

By following these steps, you'll have a Spring Boot application that can read data from a CSV file, create a corresponding table in the database if it doesn't exist, and insert the data into the table in batches. This generic solution can be adapted to various use cases where dynamic CSV file processing is required.
